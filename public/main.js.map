{"version":3,"sources":["./src/app/shared/backend/variables.ts","./src/environments/environment.ts","./src/app/shared/backend/model/pingResponse.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/shared/backend/api/poolRequestController.service.ts","./src/app/shared/backend/api/api.ts","./src/app/app.module.ts","./src/app/shared/backend/model/poolRequestWithRelations.ts","./src/app/shared/backend/encoder.ts","./src/app/shared/backend/api.module.ts","./src/app/shared/backend/configuration.ts","./src/app/shared/backend/model/models.ts","./src/app/shared/backend/api/pingController.service.ts","./src/app/shared/backend/index.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  basePath: \"http://localhost:3000\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","/**\n * app-azure-pr-manager-api\n * App Azure Pool Requests Manager API\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: masalinas.gancedo@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PingResponse { \n    greeting?: string;\n    date?: string;\n    url?: string;\n    headers?: { [key: string]: object; };\n}\n\n","import { Component } from '@angular/core';\nimport { LazyLoadEvent } from 'primeng/api';\nimport { map } from 'rxjs/operators';\n\nimport { PoolRequestControllerService } from './shared/backend/api/poolRequestController.service';\nimport { PoolRequestWithRelations } from './shared/backend/model/poolRequestWithRelations';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  public title = 'PR List Manager';\n  public loading: boolean;\n  public poolRequestWithRelationss: PoolRequestWithRelations[] = [];\n  public user: any;\n  public users: any[] = [];\n  public selectedUser: any = null;\n  public event: LazyLoadEvent;\n  public top: number = 20;\n  public page: number = 0;\n  public skip: number;\n  \n  constructor(private poolRequestControllerService: PoolRequestControllerService) {\n    this.getUsers(); \n    this.getPRs(); \n  }\n\n  private getUsers() {\n    this.users.push(\n      {name: \"All users\", username: \"\"},\n      {name: \"Miguel Salinas\", username: \"masalinas@bilbomatica.es\"},\n      {name: \"Daniel Toro\", username: \"dtoro@bilbomatica.es\"},\n      {name: \"Jaime Rivero\", username: \"jrivero@gloin.es\"},\n      {name: \"Fernando Fernández Rivero\", username: \"ffernandez@gloin.es\"},\n      {name: \"Jacob Uribe Ais\", username: \"juribe@bilbomatica.es\"},\n      {name: \"Jose Dávila\", username: \"jadavila@gloin.es\"},\n      {name: \"Jose Jurado\", username: \"jose.jurado@twtspain.com\"},\n      {name: \"Fernando Pulido\", username: \"fpulido@gloin.es\"},\n      {name: \"Ricardo\", username: \"rflores@gloin.es\"},\n      {name: \"Cristian David Franco Garcia \", username: \"cdfranco@bilbomatica.es\"},\n      {name: \"Ainara Arizaga Beistegi\", username: \"aarizaga@bilbomatica.es\"},\n      {name: \"Carlos Rodríguez\", username: \"carlos.rodriguez@gloin.es\"}\n    );\n  }  \n\n  public onPreviousPage() {\n    if (this.page > 0)\n      this.page = this.page - 1;\n\n    this.getPRs();\n  }\n\n  public onNextPage() {\n    this.page = this.page + 1;\n\n    this.getPRs();\n  }\n\n  public onUserChange(user: any) {\n    this.page = 0;\n\n    this.getPRs(user);\n  }\n\n  private getPRs(user?: any) {\n    this.loading = true;\n    let username: string;\n\n    if (user)\n      username = user.username;\n    \n    this.skip = this.page * this.top;\n\n    this.poolRequestControllerService.poolRequestControllerFindById(this.skip.toString(), this.top.toString(), username).pipe(map((datum) => datum.map((poolRequestWithRelations: any) => {\n      if (poolRequestWithRelations.closedDate != undefined)\n        poolRequestWithRelations.closedDate = new Date(poolRequestWithRelations.closedDate);\n\n      if (poolRequestWithRelations.targetRefName != undefined) {\n        let tokens: string[] = poolRequestWithRelations.targetRefName.split('/');\n        poolRequestWithRelations.targetRefName = tokens[tokens.length - 1];\n      }\n\n      if (poolRequestWithRelations.sourceRefName != undefined) {\n        let tokens: string[] = poolRequestWithRelations.sourceRefName.split('/');\n        poolRequestWithRelations.sourceRefName = tokens[tokens.length - 1];\n      }\n\n      return poolRequestWithRelations;\n    }))).subscribe((poolRequestWithRelationss: any) => {\n        this.poolRequestWithRelationss = poolRequestWithRelationss;\n\n        this.loading = false;\n    },\n    err => {\n      console.log(err);\n      \n      this.loading = false;\n    });\n  }\n}\n","<h1>Azure Pull Requests List</h1>\n\n<div class=\"p-d-flex toolbar\" style=\"width: 100%;\">\n    <p-dropdown id=\"user\" [showClear]=\"true\" [options]=\"users\" [(ngModel)]=\"selectedUser\" optionLabel=\"name\" (onChange)=\"onUserChange(selectedUser)\"></p-dropdown>\n    <div class=\"p-ml-auto page-title\">Página</div>\n    <button pButton pRipple type=\"button\" icon=\"pi pi-angle-left\" class=\"previous-page\" (click)=\"onPreviousPage()\" [disabled]=\"page === 0\"></button>\n    <div class=\"page\">{{page + 1}}</div>\n    <button pButton pRipple type=\"button\" icon=\"pi pi-angle-right\" class=\"next-page\" (click)=\"onNextPage()\" [disabled]=\"poolRequestWithRelationss.length < top\"></button>\n</div>\n\n<p-table  #dtPR [value]=\"poolRequestWithRelationss\"\n          [rows]=\"10\" \n          [showCurrentPageReport]=\"true\"           \n          [rowsPerPageOptions]=\"[10,25,50]\" \n          [loading]=\"loading\"\n          [paginator]=\"true\" \n          currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"                    \n          styleClass=\"p-datatable-customers p-datatable-gridlines\">\n    <ng-template pTemplate=\"header\">\n            <tr>\n                <th>\n                    <div class=\"p-d-flex p-jc-between p-ai-center\">\n                        Created By\n                        <p-columnFilter type=\"text\" field=\"createdBy\" display=\"menu\"></p-columnFilter>\n                    </div>\n                </th>          \n                <th>\n                    <div class=\"p-d-flex p-jc-between p-ai-center\">\n                        Title\n                        <p-columnFilter type=\"text\" field=\"title\" display=\"menu\"></p-columnFilter>\n                    </div>\n                </th>\n                <th>\n                    <div class=\"p-d-flex p-jc-between p-ai-center\">\n                        Repository\n                        <p-columnFilter type=\"text\" field=\"repository\" display=\"menu\"></p-columnFilter>\n                    </div>\n                </th>\n                <th>\n                    <div class=\"p-d-flex p-jc-between p-ai-center\">\n                        Source Branch\n                        <p-columnFilter type=\"text\" field=\"sourceRefName\" display=\"menu\"></p-columnFilter>\n                    </div>\n                </th> \n                <th>\n                    <div class=\"p-d-flex p-jc-between p-ai-center\">\n                        Target Branch\n                        <p-columnFilter type=\"text\" field=\"targetRefName\" display=\"menu\"></p-columnFilter>\n                    </div>\n                </th>                \n                <th>                \n                    <div class=\"p-d-flex p-jc-between p-ai-center\">\n                        Clode Date\n                        <p-columnFilter type=\"date\" field=\"closedDate\" display=\"menu\"></p-columnFilter>\n                    </div>\n                </th>\n                <th>                \n                    <div class=\"p-d-flex p-jc-between p-ai-center\">\n                        Status\n                        <p-columnFilter type=\"text\" field=\"status\" display=\"menu\"></p-columnFilter>\n                    </div>\n                </th>\n        </tr>\n    </ng-template>\n    <ng-template pTemplate=\"body\" let-poolRequestWithRelations>\n        <tr>\n            <td>{{poolRequestWithRelations.createdBy}}</td>          \n            <td>{{poolRequestWithRelations.title}}</td>          \n            <td>{{poolRequestWithRelations.repository}}</td>\n            <td>{{poolRequestWithRelations.sourceRefName}}</td>\n            <td>{{poolRequestWithRelations.targetRefName}}</td>\n            <td>{{poolRequestWithRelations.closedDate | date: 'dd/MM/yyyy HH:mm:ss'}}</td>\n            <td>{{poolRequestWithRelations.status}}</td>\n        </tr>\n    </ng-template>\n</p-table>","/**\n * app-azure-pr-manager-api\n * App Azure Pool Requests Manager API\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: masalinas.gancedo@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { PoolRequestWithRelations } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PoolRequestControllerService {\n\n    protected basePath = 'http://localhost:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param skip \n     * @param top \n     * @param username \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public poolRequestControllerFindById(skip: string, top: string, username?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PoolRequestWithRelations>;\n    public poolRequestControllerFindById(skip: string, top: string, username?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PoolRequestWithRelations>>;\n    public poolRequestControllerFindById(skip: string, top: string, username?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PoolRequestWithRelations>>;\n    public poolRequestControllerFindById(skip: string, top: string, username?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (skip === null || skip === undefined) {\n            throw new Error('Required parameter skip was null or undefined when calling poolRequestControllerFindById.');\n        }\n        if (top === null || top === undefined) {\n            throw new Error('Required parameter top was null or undefined when calling poolRequestControllerFindById.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (skip !== undefined && skip !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>skip, 'skip');\n        }\n        if (top !== undefined && top !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>top, 'top');\n        }\n        if (username !== undefined && username !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>username, 'username');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<PoolRequestWithRelations>(`${this.configuration.basePath}/prs/${encodeURIComponent(String(skip))}/${encodeURIComponent(String(top))}/${encodeURIComponent(String(username))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './pingController.service';\nimport { PingControllerService } from './pingController.service';\nexport * from './poolRequestController.service';\nimport { PoolRequestControllerService } from './poolRequestController.service';\nexport const APIS = [PingControllerService, PoolRequestControllerService];\n","// angular dependencies\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule,  } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule }   from '@angular/forms';\n\n// primeng dependencies\nimport { ButtonModule } from 'primeng/button';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { TableModule } from 'primeng/table';\n\n// import angular envirotment variables\nimport { Configuration } from './shared/backend';\nimport { environment } from '../environments/environment';\n\n// app dependencies\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ButtonModule,\n    DropdownModule,\n    TableModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [\n    {\n      provide: Configuration,\n      useFactory: () =>\n          new Configuration({ basePath: environment.basePath})\n    },\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","/**\n * app-azure-pr-manager-api\n * App Azure Pool Requests Manager API\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: masalinas.gancedo@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * (tsType: PoolRequestWithRelations, schemaOptions: { includeRelations: true })\n */\nexport interface PoolRequestWithRelations { \n  [key: string]: object | any;\n\n\n    title: string;\n    description: string;\n    createdBy: string;\n    closedDate: string;\n    reviewers: Array<string>;\n    sourceRefName: string;\n    targetRefName: string;\n    status: string;\n}\n\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { PingControllerService } from './api/pingController.service';\nimport { PoolRequestControllerService } from './api/poolRequestController.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","export * from './pingResponse';\nexport * from './poolRequestWithRelations';\n","/**\n * app-azure-pr-manager-api\n * App Azure Pool Requests Manager API\n *\n * The version of the OpenAPI document: 0.0.1\n * Contact: masalinas.gancedo@gmail.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { PingResponse } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PingControllerService {\n\n    protected basePath = 'http://localhost:3000';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pingControllerPing(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PingResponse>;\n    public pingControllerPing(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PingResponse>>;\n    public pingControllerPing(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PingResponse>>;\n    public pingControllerPing(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType_: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n\n        return this.httpClient.get<PingResponse>(`${this.configuration.basePath}/ping`,\n            {\n                responseType: <any>responseType_,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}